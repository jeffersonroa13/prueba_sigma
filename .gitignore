# You can keep your repository small and manageable with a .gitignore file.
# Prevent build artifacts, large binary files, and other large file types
# such as log files, media files, and executables from slowing down your workflow.
#
# If you need to keep large files in Bitbucket, consider introducing
# Git Large File Storage (Git LFS) as part of your workflow.
#
# Learn more about .gitignore:
#     https://www.atlassian.com/git/tutorials/saving-changes/gitignore
# Learn more about Git LFS for large files:
#     https://www.atlassian.com/git/tutorials/git-lfs

*.swp
*.*~
project.lock.json
.DS_Store
*.pyc
nupkg/

# Visual Studio Code
.vscode

# Rider
.idea

# User-specific files
*.suo
*.user
*.userosscache
*.sln.docstates

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
build/
bld/
[Bb]in/
[Oo]bj/
[Oo]ut/
msbuild.log
msbuild.err
msbuild.wrn
obj/

# Visual Studio 2015
.vs/


# Angular 
.DS_STORE

*.db-wal
*.db-shm

/dist/
/bazel-out
/integration/bazel/bazel-*
e2e_test.*
*.log
node_modules

# Include when developing application packages.
pubspec.lock
.c9
.idea/
.devcontainer/*
!.devcontainer/README.md
!.devcontainer/recommended-devcontainer.json
!.devcontainer/recommended-Dockerfile
.settings/
.vscode/launch.json
.vscode/settings.json
.vscode/tasks.json
*.swo
modules/.settings
modules/.vscode
.vimrc
.nvimrc

# Don't check in secret files
*secret.js

# Ignore npm/yarn debug log
npm-debug.log
yarn-error.log

# build-analytics
.build-analytics

# rollup-test output
/modules/rollup-test/dist/

# User specific bazel settings
.bazelrc.user

.notes.md
baseline.json
front/dist/

back/ClientApp/package-lock.json

back/wwwroot/resources/
